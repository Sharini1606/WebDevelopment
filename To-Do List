<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple To-Do List</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Kaushan+Script&family=Pacifico&family=Patrick+Hand&display=swap');
        
        body {
            font-family: 'Patrick Hand', cursive;
            background-color: #add8e6;
            margin: 0;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            /* New background pattern */
            background-image: 
                radial-gradient(circle at 10% 20%, rgba(255,255,255,0.3) 0%, transparent 20%),
                radial-gradient(circle at 90% 80%, rgba(255,255,255,0.3) 0%, transparent 20%),
                linear-gradient(135deg, #add8e6 0%, #b8e1ff 100%);
            background-attachment: fixed;
            animation: gradientShift 15s ease infinite;
        }

        @keyframes gradientShift {
            0% { background-position: 0% 0%; }
            50% { background-position: 100% 100%; }
            100% { background-position: 0% 0%; }
        }

        .todo-container {
            background-color: rgba(255, 255, 255, 0.9); /* Slightly transparent */
            border-radius: 15px; /* More rounded corners */
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15); /* Deeper shadow */
            padding: 30px;
            width: 100%;
            max-width: 600px;
            border: 3px solid black;
            backdrop-filter: blur(5px); /* Frosted glass effect */
            position: relative;
            overflow: hidden;
        }

        /* Decorative elements */
        .todo-container::before {
            content: "";
            position: absolute;
            top: -10px;
            right: -10px;
            width: 50px;
            height: 50px;
            background-color: #ffcc5c;
            border-radius: 50%;
            z-index: -1;
            opacity: 0.6;
        }

        .todo-container::after {
            content: "";
            position: absolute;
            bottom: -20px;
            left: -20px;
            width: 80px;
            height: 80px;
            background-color: #ff6b6b;
            border-radius: 50%;
            z-index: -1;
            opacity: 0.4;
        }

        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 25px;
            font-family: 'Pacifico', cursive;
            font-size: 2.4em;
            font-weight: normal;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
            position: relative;
        }

        h1::after {
            content: "";
            display: block;
            width: 100px;
            height: 3px;
            background: linear-gradient(to right, #ff6b6b, #ffcc5c);
            margin: 10px auto;
            border-radius: 3px;
        }

        .input-container {
            display: flex;
            margin-bottom: 25px;
            position: relative;
        }

        #taskInput {
            flex-grow: 1;
            padding: 12px 15px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 18px;
            font-family: 'Patrick Hand', cursive;
            transition: all 0.3s ease;
            background-color: rgba(255,255,255,0.8);
        }

        #taskInput:focus {
            border-color: #4CAF50;
            outline: none;
            box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.2);
        }

        #addTaskBtn {
            padding: 12px 20px;
            background: linear-gradient(to bottom, #4CAF50, #45a049);
            color: white;
            border: none;
            border-radius: 8px;
            margin-left: 15px;
            cursor: pointer;
            font-size: 18px;
            font-weight: bold;
            font-family: 'Patrick Hand', cursive;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        #addTaskBtn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0,0,0,0.15);
        }

        #addTaskBtn:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        #taskList {
            list-style-type: none;
            padding: 0;
        }

        .task-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border-bottom: 1px solid #eee;
            transition: all 0.3s ease;
            font-size: 18px;
            background-color: rgba(255,255,255,0.6);
            border-radius: 8px;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .task-item:hover {
            transform: translateX(5px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .task-item:last-child {
            border-bottom: none;
        }

        .task-text {
            flex-grow: 1;
            margin-left: 15px;
        }

        .completed {
            text-decoration: line-through;
            color: #888;
            opacity: 0.7;
        }

        .delete-btn {
            background: linear-gradient(to bottom, #f44336, #d32f2f);
            color: white;
            border: none;
            border-radius: 6px;
            padding: 8px 15px;
            cursor: pointer;
            margin-left: 15px;
            font-size: 16px;
            font-family: 'Patrick Hand', cursive;
            transition: all 0.3s ease;
        }

        .delete-btn:hover {
            transform: scale(1.05);
        }

        /* Floating decoration elements */
        .floating {
            position: fixed;
            opacity: 0.3;
            z-index: -1;
            animation: float 15s ease-in-out infinite;
        }

        .floating:nth-child(1) {
            top: 10%;
            left: 10%;
            font-size: 3em;
            animation-delay: 0s;
        }

        .floating:nth-child(2) {
            top: 70%;
            left: 80%;
            font-size: 2.5em;
            animation-delay: 3s;
        }

        .floating:nth-child(3) {
            top: 30%;
            left: 85%;
            font-size: 4em;
            animation-delay: 6s;
        }

        .floating:nth-child(4) {
            top: 80%;
            left: 15%;
            font-size: 3.5em;
            animation-delay: 9s;
        }

        @keyframes float {
            0% { transform: translateY(0) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(5deg); }
            100% { transform: translateY(0) rotate(0deg); }
        }
    </style>
</head>
<body>
    <!-- Floating decorative elements -->
    <div class="floating">üìù</div>
    <div class="floating">‚úÖ</div>
    <div class="floating">‚úèÔ∏è</div>
    <div class="floating">üìå</div>

    <div class="todo-container">
        <h1>üìù My To-Do List ‚úèÔ∏è</h1>
        <div class="input-container">
            <input type="text" id="taskInput" placeholder="Add a new task...">
            <button id="addTaskBtn">Add Task</button>
        </div>
        <ul id="taskList"></ul>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const taskInput = document.getElementById('taskInput');
            const addTaskBtn = document.getElementById('addTaskBtn');
            const taskList = document.getElementById('taskList');

            // Add task function
            function addTask() {
                const taskText = taskInput.value.trim();
                if (taskText === '') return;

                const taskItem = document.createElement('li');
                taskItem.className = 'task-item';

                const taskCheckbox = document.createElement('input');
                taskCheckbox.type = 'checkbox';
                taskCheckbox.addEventListener('change', toggleTaskComplete);

                const taskSpan = document.createElement('span');
                taskSpan.className = 'task-text';
                taskSpan.textContent = taskText;

                const deleteBtn = document.createElement('button');
                deleteBtn.className = 'delete-btn';
                deleteBtn.textContent = 'Delete';
                deleteBtn.addEventListener('click', deleteTask);

                taskItem.appendChild(taskCheckbox);
                taskItem.appendChild(taskSpan);
                taskItem.appendChild(deleteBtn);

                taskList.appendChild(taskItem);
                taskInput.value = '';
                taskInput.focus();
            }

            // Toggle task completion
            function toggleTaskComplete(e) {
                const taskItem = e.target.parentElement;
                const taskText = taskItem.querySelector('.task-text');
                taskText.classList.toggle('completed');
            }

            // Delete task
            function deleteTask(e) {
                const taskItem = e.target.parentElement;
                taskList.removeChild(taskItem);
            }

            // Event listeners
            addTaskBtn.addEventListener('click', addTask);
            
            taskInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    addTask();
                }
            });
        });
    </script>
</body>
</html>
